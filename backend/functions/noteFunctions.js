const path = require("path");
const fs = require("fs");
const fsPromises = require("fs").promises;
const pdfParse = require("pdf-parse");

const uploadDir = path.join(__dirname, "..", "notes");

// Mappa l√©trehoz√°sa, ha nem l√©tezik
function ensureDirectoryExists() {
  if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
    console.log(` Mappa l√©trehozva: ${uploadDir}`);
  }
}

// F√°jl ment√©se a "notes" mapp√°ba
function saveFile(file) {
  if (!file || !file.buffer) {
    console.error("Hiba: A f√°jl buffer nem l√©tezik vagy √ºres.");
    return { success: false, message: "A f√°jl adatai nem √©rhet≈ëk el." };
  }

  console.log("üìÅ F√°jl buffer tartalom:", file.buffer);

  const fileBuffer = file.buffer ? file.buffer : Buffer.from([]);
const filePath = path.join(uploadDir, file.originalname);

try {
  fs.writeFileSync(filePath, fileBuffer);
  console.log(`F√°jl sikeresen mentve: ${filePath}`);
  return { success: true, filePath };
} catch (err) {
  console.error("Hiba t√∂rt√©nt a f√°jl ment√©sekor:", err);
  return { success: false, message: "Hiba t√∂rt√©nt a f√°jl ment√©sekor." };
}

}

// PDF f√°jl sz√∂veg√©nek kiolvas√°sa
async function processPdf(data) {
  const subject = data.subject;
  const note = data.note;
  let text = "";

  if (subject !== "") {
    const pdfPath = path.join(__dirname, "..", "notes", note);
    try {
      await fsPromises.access(pdfPath);
    } catch (error) {
      console.log(`A f√°jl nem tal√°lhat√≥: ${pdfPath}`);
      return { error: "F√°jl nem tal√°lhat√≥!" };
    }

    try {
      const fileBuffer = await fsPromises.readFile(pdfPath);
      const parsed = await pdfParse(fileBuffer);
      text = parsed.text;
    } catch (error) {
      console.error("Hiba a f√°jl feldolgoz√°sa k√∂zben:", error);
      return { error: "PDF feldolgoz√°si hiba!" };
    }
  }

  return text;
}


module.exports = {
  ensureDirectoryExists,
  saveFile,
  processPdf,
};
